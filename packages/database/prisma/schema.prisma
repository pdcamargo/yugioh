// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
}

model User {
  id            String    @id @default(cuid())
  index         Int       @default(autoincrement())
  password      String
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  gems Int @default(0)

  neutralGems   Int @default(0)
  rareGems      Int @default(0)
  superRareGems Int @default(0)
  ultraRareGems Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards UserCard[]
  decks Deck[]

  @@map("users")
}

model UserCard {
  id     String @id @default(cuid())
  index  Int    @default(autoincrement())
  userId String
  cardId String // This won't be added to the database, this will be a JSON file fetched by client, but this ID is always fixed
  artId  String

  rarity String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  deckCard DeckCard[]

  @@index([userId])
  @@map("user_cards")
}

model Deck {
  id          String   @id @default(cuid())
  index       Int      @default(autoincrement())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  cards DeckCard[]

  @@index([userId])
  @@map("decks")
}

model DeckCard {
  id     String @id @default(cuid())
  index  Int    @default(autoincrement())
  deckId String
  cardId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck Deck     @relation(fields: [deckId], references: [id])
  card UserCard @relation(fields: [cardId], references: [id])

  @@index([deckId])
  @@index([cardId])
  @@map("deck_cards")
}

model Match {
  id    String @id @default(cuid())
  index Int    @default(autoincrement())

  matchId String

  player1Id String
  player2Id String

  player1DeckId String
  player2DeckId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([player1Id])
  @@index([player2Id])
  @@index([matchId])
  @@map("matches")
}

model CardSet {
  id    String @id @default(cuid())
  index Int    @default(autoincrement())

  name        String
  description String?
  coverImage  String

  availableFrom DateTime?
  availableTo   DateTime?

  packType String

  /// ![{ Common: number; Rare: number; "Super Rare": number; "Ultra Rare": number; Other: number;}]
  distribution Json

  /// ![{ Common: number; Rare: number; "Super Rare": number; "Ultra Rare": number;}]
  odds Json

  /// ![{ cardId: number; rarity: string; arts: Array<{ id: number; weight: number; }> }]
  cards Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("card_sets")
}
